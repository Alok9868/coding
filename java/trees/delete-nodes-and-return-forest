/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

https://leetcode.com/problems/delete-nodes-and-return-forest/?envType=daily-question&envId=2024-07-17


class Solution {

private TreeNode helper(TreeNode root , HashSet<Integer>hashSet , List<TreeNode>list)
    {
        if (root==null)
        {
            return null;
        }

        root.left=helper(root.left,hashSet,list);
        root.right=helper(root.right,hashSet,list);

        if (hashSet.contains(root.val))
        {
            if (root.left!=null)
            {
                list.add(root.left);
            }
            if (root.right!=null)
            {
                list.add(root.right);
            }
            return null;
        }

        return root;



    }

    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {


        HashSet<Integer>hashSet=new HashSet<>();
        int n=to_delete.length;
        for (int i=0;i<n;i++)
        {
            hashSet.add(to_delete[i]);
        }

        List<TreeNode>result=new ArrayList<>();
        TreeNode newroot=helper(root,hashSet,result);
        if (newroot!=null)
        {
            result.add(newroot);
        }
        return result;





    }
}
