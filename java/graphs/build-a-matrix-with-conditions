https://leetcode.com/problems/build-a-matrix-with-conditions/description/?envType=daily-question&envId=2024-07-21

class Solution {

    static Boolean dfs(List<Integer> adj[], int u, Stack<Integer> ans, Integer vis[]) {


        // 1 -> 2
        // 3 -> 2
        vis[u] = 1;
        for (Integer a : adj[u]) {
            if (vis[a] == 0) {
                if (dfs(adj, a, ans, vis))
                {
                    return true;
                }
            } else if (vis[a] == 1) {
              return true;
            }
        }
        vis[u] = 2;
        ans.push(u);
        return false;
    }

    public static int[] topoSort(int V, List<Integer> adj[]) {
        // code here
        Stack<Integer> stack = new Stack<>();
        int result[] = null;
        Integer vis[] = new Integer[V];

        for (int i = 0; i < V; i++) {
            vis[i] = 0;
        }

        Boolean cycle = false;
        for (int i = 1; i < V; i++) {
            if (vis[i] == 0) {
                if (dfs(adj, i, stack, vis)) {
                    return result;
                }
            }

        }
        result = new int[V-1];
        int i = 0;
        while (!stack.empty()) {
            result[i] = stack.pop();
            i++;
        }


        return result;
    }

    public static int[][] buildMatrix(int k, int[][] rowConditions, int[][] colConditions) {

        int n = rowConditions.length;
        int m = colConditions.length;

        k += 1;
        List<Integer> rowGraph[] = new List[k];
        List<Integer> colGraph[] = new List[k];

        for (int i=0; i<k; i++) {
            rowGraph[i] = new ArrayList<>();
        }
        for (int i=0; i<k; i++) {
            colGraph[i] = new ArrayList<>();
        }


        for (int i = 0; i < n; i++) {

            int u = rowConditions[i][0];
            int v = rowConditions[i][1];
            rowGraph[u].add(v);
        }

        for (int i = 0; i < m; i++) {

            int u = colConditions[i][0];
            int v = colConditions[i][1];
            colGraph[u].add(v);
        }



        int[] rowsOrder = topoSort(k, rowGraph);
        int[] colsOrder = topoSort(k, colGraph);
        int[][] result = new int[0][0];
        if (rowsOrder == null || colsOrder == null) {
            return result;
        }

        result = new int[rowsOrder.length][colsOrder.length];

        for (int i = 0; i < rowsOrder.length; i++) {
            for (int j = 0; j < colsOrder.length; j++) {
                result[i][j] = 0;
            }
        }




        for (int i = 1; i < k; i++) {

            int curr_row_num = rowsOrder[i-1];
//            System.out.println(curr_row_num);
            // find that no in the col and put that in that col
            for (int j = 1; j < k; j++) {
                if (colsOrder[j-1] == curr_row_num) {
                    result[i-1][j-1] = curr_row_num;
                }
            }
        }


        return result;


    }
}
