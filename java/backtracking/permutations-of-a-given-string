https://www.geeksforgeeks.org/problems/permutations-of-a-given-string2041/1


//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            String S = br.readLine().trim();
            Solution obj = new Solution();
            ArrayList<String> ans = obj.findPermutation(S);
            Collections.sort(ans);
            for (int i = 0; i < ans.size(); i++) {
                out.print(ans.get(i) + " ");
            }
            out.println();

            out.println("~");
        }
        out.close();
    }
}

// } Driver Code Ends


class Solution {
    
    
    
     ArrayList<String> permutations;

    void backTrack(char array[], int idx, StringBuilder temp, boolean[] used) {
        if (temp.length()==array.length) {
            permutations.add(String.valueOf(temp));
            return;
        }


        //aabc

        // temp - a
        // i - 1
        // 0- false
        // 1- true
        // 2 - false
        // 3 - false


        // ""
        // i - 1

        for (int i = 0; i < array.length; i++) {

            if (used[i]) {
                continue;
            }
            if (i>0 && array[i]==array[i-1] && !used[i-1])
            {
                continue;
            }
            used[i] = true;
              temp.append(array[i]);
            backTrack(array, i + 1, temp, used);
            used[i]=false;
            temp.deleteCharAt(temp.length()-1);
        }

    }


    public ArrayList<String> findPermutation(String s) {


        char array[] = s.toCharArray();
        Arrays.sort(array);
        permutations = new ArrayList<>();
        boolean[] used = new boolean[s.length()];
        backTrack(array, 0, new StringBuilder(), used);
        return permutations;


    }
}
