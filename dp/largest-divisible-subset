https://leetcode.com/problems/largest-divisible-subset/description/?envType=daily-question&envId=2024-02-09


class Solution {
public:

    int n;
    vector<int>ans;
    void helper(vector<int>& nums , int idx , int previdx , vector<int>&temp)
    {
        if(idx<0)
        {
            if(ans.size()<temp.size())
            {
                ans=temp;
            }
            return ;
        }   


        int first=0,second=0;
        helper(nums,idx-1,previdx,temp);
        if(previdx==n || nums[previdx]%nums[idx]==0)
        {
            temp.push_back(nums[idx]);
            helper(nums,idx-1,idx,temp);
            temp.pop_back();
        }

    }

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        

        sort(nums.begin(),nums.end());
        n=nums.size();
        vector<int>temp;
        helper(nums,n-1,n,temp);
        return ans;


    }
};


//Optimized approach 
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
        int n=nums.size();
        vector<pair<int,int>>dp(n+1);
        sort(nums.begin(),nums.end());

        //4 8 10 240 
        //save the max len and idx globally 
        //max_len=0
        //idx=1
        //{-1,1},{0,2},{-1,1},{1,3}
      
        dp[0]=make_pair(-1,1);
        int index=0;
        int max_len=0;
        for(int i=1;i<n;i++)
        {
            int prev=nums[i];
            int prev_idx=-1;
            int len=1;
            for(int j=i-1;j>=0;j--)
            {
                if(nums[i]%nums[j]==0)
                {
                    if(len<dp[j].second+1)
                    {
                        len=dp[j].second+1;
                        prev_idx=j;
                    }
                }
            }
            dp[i].first=prev_idx;
            dp[i].second=len;
            if(max_len<len)
            {
                max_len=len;
                index=i;
            }
        }

        vector<int>ans;
        while(index!=-1)
        {
            ans.push_back(nums[index]);
            index=dp[index].first;
        }

        return ans;


    }
};

