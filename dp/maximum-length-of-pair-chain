https://leetcode.com/problems/maximum-length-of-pair-chain/description/

// we can easily solve this question using dp , we have take two index and just check the if statement and added it to the queue

class Solution {
public:


    static bool comp(vector<int>&a,vector<int>&b)
    {
        return a[0]<b[0];
    }


    int helper(vector<vector<int>>& pairs , int idx, int lastidx ,vector<vector<int>>&dp)
    {
        if(idx==pairs.size())
        {
            return 0;
        }

        if(dp[idx+1][lastidx+1]!=-1)
        {
            return dp[idx+1][lastidx+1];
        }
        
        int take=0;

        if(lastidx==-1 || pairs[lastidx][1]<pairs[idx][0])
        {
            take=helper(pairs,idx+1,idx,dp)+1;
        }
        int nottake=helper(pairs,idx+1,lastidx,dp);
        return dp[idx+1][lastidx+1]=max(take,nottake);
    }

    int findLongestChain(vector<vector<int>>& pairs) {
        
        
        sort(pairs.begin(),pairs.end(),comp);
        for(auto it:pairs)
        {
            cout<<it[0]<<" "<<it[1]<<endl;
        }
        vector<vector<int>>dp(pairs.size()+1,vector<int>(pairs.size()+1,-1));
        return helper(pairs,0,-1,dp);

    }
};
