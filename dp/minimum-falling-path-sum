https://leetcode.com/problems/minimum-falling-path-sum/?envType=daily-question&envId=2024-01-19

int getAnswer(int i ,int j ,vector<vector<int>>&matrix )
    {
        if(i>=0 && i<n && j>=0 && j<m)
        {
            return matrix[i][j];
        }

        return INT_MAX;
    }

int n,m;
    int minFallingPathSum(vector<vector<int>>& matrix) {

    int ans=INT_MAX;
    // vector<vector<int>>dp(matrix.size(),vector<int>(matrix[0].size(),INT_MIN));


    // for(int j=0;j<matrix[0].size();j++)
    // {
    //     dp[n][j]=matrix[i][j];
    // }
    n=matrix.size();
    m=matrix[0].size();
    if(n==1)
    {
         for(int j=0;j<m;j++)
        {
            ans=min(ans,matrix[0][j]);
        }
        return ans;
    }

   
    for(int i=n-2;i>=0;i--)
    {
        for(int j=0;j<m;j++)
        {
            //down
            int down=getAnswer(i+1,j,matrix);
            //right
            int left=getAnswer(i+1,j-1,matrix);
            //left
            int right=getAnswer(i+1,j+1,matrix);
            matrix[i][j]=min({down,left,right})+matrix[i][j];
            if(i==0)
            {
                ans=min(ans,matrix[i][j]);
            }


        }
    }

    return ans;

    }


// Second approach using recursion


 int helper(vector<vector<int>>&matrix,int i,int j,vector<vector<int>>&dp)
    {
        
        if(i==matrix.size() || j==matrix[0].size() || j<0)
        {

            return INT_MAX;
        }

        if(i==matrix.size()-1)
        {
            return matrix[i][j];
        }


        if(dp[i][j]!=INT_MIN)
        {
            return dp[i][j];
        }
        
        //down
         int down=helper(matrix,i+1,j,dp);
        //right
        int left=helper(matrix,i+1,j-1,dp);
        //left
        int right=helper(matrix,i+1,j+1,dp);

        dp[i][j]=min({down,left,right})+matrix[i][j];
        return dp[i][j];



    }
