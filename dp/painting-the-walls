https://leetcode.com/problems/painting-the-walls/description/?envType=daily-question&envId=2023-10-14
//https://www.youtube.com/watch?v=FkJ2_hr6DRo&ab_channel=codestorywithMIK
// DP APPROACH 
class Solution {
public:

    long helper(vector<int>&cost,vector<int>&time , int idx, int rem_walls ,vector<vector<long>>&dp)
    {
        if(rem_walls <=0)
        {
            return 0;
        }

        if(idx==cost.size())
        {
            return INT_MAX;
        }

        if(dp[idx][rem_walls]!=-1)
        {
            return dp[idx][rem_walls];
        }

        long paint=helper(cost,time,idx+1,rem_walls-1-time[idx],dp)+cost[idx];
        long not_paint=helper(cost,time,idx+1,rem_walls,dp);

         return dp[idx][rem_walls]=min(paint,not_paint);



    }

    int paintWalls(vector<int>& cost, vector<int>& time) {
        
        int n=cost.size();
        vector<vector<long>>dp(n,vector<long>(n+1,-1));

        return helper(cost,time,0, n ,dp);
        
    }
};


// BOTTOM UP APPROACH

int paintWalls(vector<int>& cost, vector<int>& time) {
        
        int n=cost.size();
        // vector<vector<long>>dp(n+1,vector<long>(n+1,INT_MAX));
        vector<long>next(n+1,INT_MAX);
        next[0]=0;
        for(int idx=n-1;idx>=0;idx--)
        {
            vector<long>curr(n+1);
            for(int rem_walls=n;rem_walls>=0;rem_walls--)
            {
                long paint=next[max(rem_walls-1-time[idx] ,0)]
                +cost[idx];
                long not_paint=next[rem_walls];
                curr[rem_walls]=(min(paint,not_paint));
            }
            next=curr;
        }

        return next[n];
        
    }
