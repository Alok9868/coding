https://leetcode.com/problems/constrained-subsequence-sum/?envType=daily-question&envId=2023-10-21
// this is one of the soln but it is giving memory limit exceeded 
// for reference plz this soln
https://www.youtube.com/watch?v=tWhboGihflM&t=3035s&ab_channel=codestorywithMIK
class Solution {
public:


    int k;
    int helper(vector<int>& nums, int idx,int previdx ,
    vector<vector<int>>&dp)
    {   
        if(idx==nums.size())
        {
            return 0;
        }
        
        if(dp[idx][previdx+1]!=-1)
        {
            return dp[idx][previdx+1];
        }
        int take=INT_MIN;
        if(previdx==-1 || idx-previdx<=k)
        {
            take=helper(nums,idx+1,idx,dp)+nums[idx];
        }
        
        int nottake=helper(nums,idx+1,previdx,dp);

        return dp[idx][previdx+1]= max(take,nottake);

    }   

    int constrainedSubsetSum(vector<int>& nums, int k) {

        this->k=k;
        bool flag=false;
        int maxi=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
                
                flag=true;
                break;
            }
            maxi=max(nums[i],maxi);
        }
        if(!flag)
        {
            return maxi;
        }
        
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return helper(nums,0,-1 ,dp);


    }
};
