https://practice.geeksforgeeks.org/problems/shortest-path-in-weighted-undirected-graph/1

Solution using dijstra algo


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends




class Solution {
  public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    
    class comp
    {
      
      public:
      bool operator()(pair<int,int>&a,pair<int,int>&b)
      {
          return a.second>b.second;
      }
        
    };
    
    

  
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
         priority_queue< pair<int,int>  , vector< pair<int,int> >,comp>pq;
        
        
        vector<int>dist(n+1,INT_MAX);
        
        vector<vector<int>>adj[n+1];
        for(int i=0;i<m;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int dist=edges[i][2];
            adj[u].push_back({v,dist});
            adj[v].push_back({u,dist});
        }
        
        vector<int>parent(n+1,0);
        for(int i=0;i<n+1;i++)
        {
            parent[i]=i;
        }
        
        int S=1;
        dist[S]=0;
        pq.push({S,0});
        while(!pq.empty())
        {
            int node=pq.top().first;
            int dist1=pq.top().second;
            pq.pop();
            for(auto it:adj[node])
            {
                int v=it[0];
                int dist2=it[1];
                if(dist2+dist1 < dist[v])
                {
                    dist[v]=dist1+dist2;
                    parent[v]=node;
                    pq.push({v,dist[v]});
                }
            }
        }
        
        
        int node=n;
        vector<int>result;
        if(parent[node]==node)
        {
            result.push_back(-1);
            return result;
        }
        result.push_back(node);
        while(parent[node]!=node)
        {
            result.push_back(parent[node]);
            node=parent[node];
        }
        
        reverse(result.begin(),result.end());
        return result;
        
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends

