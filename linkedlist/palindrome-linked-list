/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

https://leetcode.com/problems/palindrome-linked-list/description/?envType=daily-question&envId=2024-03-22
class Solution {
public:


    bool checkIfPalindrome(ListNode*head1 , ListNode*head2)
    {
        while(head1 && head2)
        {
            if(head1->val != head2->val)
            {
                return false;
            }


            head1=head1->next;
            head2=head2->next;
        }

        return true;
    }

    ListNode* reverse(ListNode*head)
    {
        ListNode*temp=head;

        ListNode*prev=NULL;

        // temp=1
        //prev=0
        // next = 2

        //4->3->2->1->NULL

        while(temp)
        {
            ListNode*next=temp->next;
            temp->next=prev;
            prev=temp;
            temp=next;
        }       

        return prev;
    }

    bool isPalindrome(ListNode* head) {


        // find the middle of the linkedlist 
        ListNode*slow=head;
        ListNode*fast=head->next;
        while(fast&& fast->next)
        {
            fast=fast->next->next;
            slow=slow->next;
        }

        // reversethe second half of the linkedlist and match the nodes
        ListNode*head2=reverse(slow->next);
        return  checkIfPalindrome(head,head2);






        
    }
};
