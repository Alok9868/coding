//https://leetcode.com/problems/copy-list-with-random-pointer/description


// this question can be made by two approaches 
1. By using a hashmap 
2.Using a next pointer technizue 



1. Approach -1 using map

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {

        unordered_map<Node*,Node*>umap;
        Node*temp=head;
        while(temp)
        {
            Node*newnode=new Node(temp->val);
            umap[temp]=newnode;
            temp=temp->next;
        }
    
        temp=head;
        while(temp)
        {   
            Node*newnode=umap[temp];
            Node*random=temp->random;
             newnode->next=umap[temp->next];
             newnode->random=umap[random]; 
            // if(umap.find(temp->next)!=umap.end())
            // {
            //     newnode->next=umap[temp->next];
            // }
            // if(umap.find(random)!=umap.end())
            // {
            //     newnode->random=umap[random]; 
            // }
           
            temp=temp->next;
        }
    
        return umap[head];

    }
};


//2 .Approach using next pointer 
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        
        if(!head)
        {
            return head;
        }


        Node*temp=head;
        while(temp)
        {
            Node*newnode=new Node(temp->val);
            Node*next=temp->next;
            temp->next=newnode;
            newnode->next=next;
            temp=next;
        }

        temp=head;
        // to assign only random pointers
        while(temp)
        {
            Node*newnode=temp->next;
            if(temp->random)
            {
                newnode->random=temp->random->next;
            }
            temp=temp->next->next;
        }

        Node*newhead=head->next;
        temp=head;
        // to seprate the two linkedlist 
        while(temp)
        {
            Node*newnode=temp->next;
            temp->next=newnode->next;
            if(newnode->next)
            {
                newnode->next=newnode->next->next;
            }
            temp=temp->next;
        }


        return newhead;




    }
};







