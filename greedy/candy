https://leetcode.com/problems/candy/description

// this question can be solved by two approaches 
 first approach 
class Solution {
public:

    int AddCandies(int index, vector<int>&ratings ,
    vector<int>&candy)
    {
            int leftNeighbour=index-1;
            int rightNeighbour=index+1;
            candy[index]=1;
            if(leftNeighbour >=0 && ratings[leftNeighbour]<ratings[index] )
            {
                candy[index]=max(candy[index], candy[leftNeighbour]+1);
            }
            if(rightNeighbour<ratings.size() && ratings[rightNeighbour]<ratings[index])
            {
                candy[index]=max(candy[index], candy[rightNeighbour]+1);
            }

            return candy[index];
    }

    class comp
    {
        public :
         bool operator()(pair<int,int>&a , pair<int,int>&b)
        {
            return a.first>b.first;
        }
    };
    


    int candy(vector<int>& ratings) {
        
        priority_queue< pair<int,int> , vector< pair<int,int> >, comp >pq;
        
        for(int i=0;i<ratings.size();i++)
        {
            pq.push({ratings[i],i});
        }

        vector<int>candy(ratings.size());
        int candies=0;
        while(!pq.empty())
        {
            int rating=pq.top().first;
            int index=pq.top().second;
            pq.pop();
            candies+=AddCandies(index,ratings,candy);
        }

        return  candies;
    }
};




Second approach 
class Solution {
public:
    int candy(vector<int>& ratings) {
        
        int n=ratings.size();
        vector<int>left(n,1);
        vector<int>right(n,1);
        
        
        for(int i=1;i<n;i++)
        {
            if(ratings[i-1]<ratings[i])
            {
                left[i]=left[i-1]+1;
            }
        }
        
        
        
        
        for(int i=n-2;i>=0;i--)
        {
            if(ratings[i+1]<ratings[i])
            {
                right[i]=right[i+1]+1;
            }
        }
        
        int  cnt=0;
        for(int i=0;i<n;i++)
        {
            cnt+=max(left[i],right[i]);
        }
        return cnt;
        
        
    }
};
