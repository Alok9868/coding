//https://leetcode.com/problems/maximum-score-of-a-good-subarray/?envType=daily-question&envId=2023-10-22
//https://www.youtube.com/watch?v=2XMBLBdgqW8&ab_channel=codestorywithMIK
// this question can be solved using two approaches using dp and greedy 
class Solution {
public:

    int result;
    void helper(vector<int>& nums, int k , int i, int st , int mini) 
    {
        if(i==nums.size())
        {
            return ;
        }

        helper(nums,k,i+1,-1,INT_MAX);
        mini=min(mini,nums[i]);
        if(st==-1)
        {
            if(i<=k)
            {
               helper(nums,k,i+1,i,mini);
            }
        }
        else 
        {
            helper(nums,k,i+1,st,mini);
            if(i>=k)
            {
                int curr_result=mini*(i-st+1);
                result=max(result,curr_result);
            }
           
        }
       
    }   
    int maximumScore(vector<int>& nums, int k) {
        
        int n=nums.size();
        int res=INT_MIN;
        for(int j=k;j<n;j++)
        {
            int mini=nums[j];
            for(int i=j-1;i>=0 ;i--)
            {
                mini=min(nums[i],mini);
                if(i<=k)
                {
                    int curr_result=mini*(j-i+1);
                    if(curr_result>res)
                    {
                        res=curr_result;
                        // cout<<j<<" "<<i <<" "<<res<<endl;
                    }
                }
                
                // res=max(res,curr_result);
            }
        }

        return res;

    }
};


// using greedy approach 

class Solution {
public:
    int maximumScore(vector<int>& nums, int k) {
        

        int i=k-1;
        int j=k+1;
        int mini=nums[k];
        int result=mini;
        int n=nums.size();
        while(i>=0 && j<n)
        {
            if(nums[i]<nums[j])
            {
                mini=min(nums[j],mini);
                result=max(result,mini*(j-i));
                j++;
            }
            else
            {
                mini=min(nums[i],mini);
                result=max(result,mini*(j-i));
                i--;
            }
        }

        while(i>=0)
        {
            mini=min(nums[i],mini);
            result=max(result,mini*(j-i));
            i--;
        }
        while(j<n)
        {
            mini=min(nums[j],mini);
            result=max(result,mini*(j-i));
            j++;
           
        }

        return result;
    }
};


