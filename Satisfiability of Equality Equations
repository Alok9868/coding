
class Solution {
public:
    vector<int>rank;
    vector<int>parent;
    int find_parent(int x)
    {   
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=find_parent(parent[x]);
    }

    void Union(int x,int y)
    {
        int x_parent=find_parent(x);
        int y_parent=find_parent(y);
        if(x_parent != y_parent)
        {
            if(rank[x_parent]>rank[y_parent])
            {
                parent[y_parent]=x_parent;
            }
            else if(rank[y_parent]>rank[x_parent])
            {
                parent[x_parent]=y_parent;
            }
            else
            {
                parent[y_parent]=x_parent;
                rank[x_parent]++;
            }
        }
    }
    bool equationsPossible(vector<string>& equations) {
        
        parent.resize(26,0);
        rank.resize(26,0);
        for(int i=0;i<26;i++)
        {
            parent[i]=i;
        }

        for(auto it:equations)
        {
            char first=it[0];
            char second=it[3];
            char comparator=it[1];
            if(comparator =='=')
            {
                Union(first-'a',second-'a');
            }
        }


        for(auto it:equations)
        {
            if(it[1]=='!')
            {
                int x_parent=find_parent(it[3]-'a');
                int y_parent=find_parent(it[0]-'a');
                if(x_parent==y_parent)
                {
                    return false;
                }
            }
        }


        return true;

    }
};
