/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


https://leetcode.com/problems/diameter-of-binary-tree/description/?envType=daily-question&envId=2024-02-27

class Solution {
public:

    class Diameter
    {
        public:
        int curr_diameter;
        int height;

        Diameter()
        {
            this->curr_diameter=0;
            this->height=0;
        }

    };


    Diameter* helper(TreeNode*root)
    {
        if(!root)
        {
            Diameter * diameter=new Diameter();
            return diameter;
        }

        Diameter* left=helper(root->left);
        Diameter* right=helper(root->right);

        Diameter* curr=new Diameter();
        int curr_diamter=left->height + right->height + 1;
        curr->height=max(left->height , right->height)+1;
        curr->curr_diameter=max({left->curr_diameter,right->curr_diameter,curr_diamter});
        return curr;

    }


    int diameterOfBinaryTree(TreeNode* root) {

        Diameter* diameter=helper(root);
        return diameter->curr_diameter-1;
        
    }
};
