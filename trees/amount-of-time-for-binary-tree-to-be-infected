https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/description/?envType=daily-question&envId=2024-01-10
class Solution {
public:

    void dfs(TreeNode* root , unordered_map<int,vector<int>> &umap ,
    int parent)
    {
        if(!root)
        {
            return ;
        }

        umap[root->val].push_back(parent);
        if(root->left)
        {
            umap[root->val].push_back(root->left->val);
        }
        if(root->right)
        {
            umap[root->val].push_back(root->right->val);
        }

        dfs(root->left,umap,root->val);
        dfs(root->right,umap,root->val);
        


    }

    int amountOfTime(TreeNode* root, int start) {
        unordered_map<int,vector<int>>umap;
        dfs(root,umap,0);
        int n=umap.size();
        unordered_map<int,int>vis;
        queue<int>q;
        q.push(start);
        int time=0;
        vis[start]=1;
        while(!q.empty())
        {
            int size=q.size();
            int infected=0;
            while(size--)
            {
                int u=q.front();
                q.pop();
                for(auto it:umap[u])
                {
                    if(it!=0 && !vis[it])
                    {
                        vis[it]=1;
                        q.push(it);
                        infected++;
                    }
                }
            }
            if(infected>0)
            {
                 time++;
            }
            else
            {
                break;
            }
        }

        return time;



    }


};


//optimized approach
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int result;
    int helper(TreeNode* root, int &start)
    {
        if(!root)
        {
            return 0;
        }   

        int lh=helper(root->left,start);
        int rh=helper(root->right,start);

        if(root->val==start)
        {
            result=max(lh,rh);
            return -1;
        }
        else if(lh>=0 && rh>=0)
        {
            return max(lh,rh)+1;
        }
        else
        {
            result=max(result,abs(lh)+abs(rh));
            return min(lh,rh)-1;
        }

        return 0;
    }
    int amountOfTime(TreeNode* root, int start) {
        
            
        helper(root,start);
        return result;
    }
};
