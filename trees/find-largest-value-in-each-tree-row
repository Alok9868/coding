https://leetcode.com/problems/find-largest-value-in-each-tree-row/description/?envType=daily-question&envId=2023-10-24
// there are two approaches to solve this questions 
// first is using bfs and other is using dfs 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// BFS APPROACH 
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {

        vector<int>result;
        if(!root)
        {
            return result;
        }    
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            int maxi=INT_MIN;
            while(size--)
            {
                TreeNode*node=q.front();
                q.pop();
                maxi=max(maxi,node->val);
                if(node->left)
                {
                    q.push(node->left);
                }
                if(node->right)
                {
                    q.push(node->right);
                }
            }
            result.push_back(maxi);
        }

        return result;    
    }
};

// DFS APPROACH 

class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int> res;

        dfs(root, 0, res);

        return res;
    }

    void dfs(TreeNode* node, int level, vector<int>& res) {
        if (!node) {
            return;
        }

        if (level == res.size()) {
            res.push_back(node->val);
        } else {
            res[level] = max(res[level], node->val);
        }

        dfs(node->left, level + 1, res);
        dfs(node->right, level + 1, res);
    }    
};
