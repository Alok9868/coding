/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


https://leetcode.com/problems/find-bottom-left-tree-value/description/?envType=daily-question&envId=2024-02-28

class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {

        queue<TreeNode*>pendingnodes;
        pendingnodes.push(root);
        TreeNode*ans=root;
        while(!pendingnodes.empty())
        {
            int size=pendingnodes.size();
            ans=pendingnodes.front();
            while(size--)
            {
                TreeNode*front=pendingnodes.front();
                pendingnodes.pop();
                if(front->left)
                {
                    pendingnodes.push(front->left);
                }
                if(front->right)
                {
                     pendingnodes.push(front->right);
                }
            }
        }

        return ans->val;
    }
};
