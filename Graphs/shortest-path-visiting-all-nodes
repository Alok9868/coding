https://leetcode.com/problems/shortest-path-visiting-all-nodes/description
//https://www.youtube.com/watch?v=m73DRkEo8Ko&ab_channel=codestorywithMIK


class Solution {
public:

    class node
    {
        public:
        int dist;
        int mask;
        int u;
        node(int dist,int mask, int u)
        {
            this->dist=dist;
            this->mask=mask;
            this->u=u;
        }
    };

    int shortestPathLength(vector<vector<int>>& graph) {
        
        int n=graph.size();
        int all_visited=(1<<n)-1;
        queue<node>pq;
        set<pair<int,int>>vis;
        for(int i=0;i<graph.size();i++)
        {
            int mask=1<<i;
            pq.push({0,mask,i});
            vis.insert({i,mask});
        }

        while(!pq.empty())
        {
            node top=pq.front();
            pq.pop();
            int u=top.u;
            int dist=top.dist;
            int mask=top.mask;
            for(auto it:graph[u])
            {
                int new_mask=mask | (1<<it);
                if(new_mask==all_visited)
                {
                    return dist+1;
                }
                if(vis.find({it,new_mask})!=vis.end())
                {
                    continue;
                }
                pq.push({dist+1,new_mask,it});
                vis.insert({it,new_mask});
            }
        }


        return 0;

    }
};
