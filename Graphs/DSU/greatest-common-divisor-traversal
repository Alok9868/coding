https://leetcode.com/problems/greatest-common-divisor-traversal/description/?envType=daily-question&envId=2024-02-25


class Solution {
public:


    vector<int>rank;
    vector<int>parent;

    int findParent(int x)
    {
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=findParent(parent[x]);
    }

    bool Union(int x, int y)
    {
        int x_parent=findParent(x);
        int y_parent=findParent(y);

        if(x_parent!=y_parent)
        {
            if(rank[x_parent]>rank[y_parent])
            {
                parent[y_parent]=x_parent;
            }
            else if(rank[y_parent]>rank[x_parent])
            {
                parent[x_parent]=y_parent;
            }
            else
            {
                parent[x_parent]=y_parent;
                rank[y_parent]++;
            }
            return true;
        }

        return false;
    }

    bool canTraverseAllPairs(vector<int>& nums) {

        unordered_map<int,int>umap;
        int n=nums.size();
        parent.resize(n);
        rank.resize(n,0);
        for(int i=0;i<n;i++)
        {
            parent[i]=i;
        }

        int ans=0;

        for(int i=0;i<n;i++)
        {
            //calc all prime factors 
            for(int factor=2;factor*factor<=nums[i];factor++)
            {
                if(nums[i]%factor==0)
                {
                    if(umap.find(factor)!=umap.end())
                    {
                        ans+=Union(umap[factor],i);
                    }
                    else
                    {
                        umap[factor]=i;
                    }
                    while(nums[i]%factor==0)
                    {
                        nums[i]=nums[i]/factor;
                    }
                }
            }

            if(nums[i]>1 && umap.find(nums[i])!=umap.end())
            {
                    ans+=Union(umap[nums[i]],i);
            }
            else
            {
                    umap[nums[i]]=i;
            }

        }
        return ans==n-1;
        
    }
};
