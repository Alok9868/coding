https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/description/

this question can also be solved using this approach 
https://www.youtube.com/watch?v=ZsGTpXm966E&ab_channel=codestorywithMIK

class Solution {
public:

    vector<int>rank;
    vector<int>parent;

    int findParent(int x)
    {
        if(parent[x]==x)
        {
            return x;
        }
        return parent[x]=findParent(parent[x]);
    }

    bool Union(int x , int y)
    {
        int x_parent=findParent(x);
        int y_parent=findParent(y);
        if(x_parent==  y_parent)
        {
            return false;
        }   

        if(rank[x_parent]> rank [y_parent])
        {
            parent[y_parent]=x_parent;
        }
        else if(rank[y_parent] > rank[x_parent])
        {
            parent[x_parent]=y_parent;
        }
        else
        {
             parent[x_parent]=y_parent;
             rank[y_parent]++;
        }

        return true;
    }

    int helper(vector<vector<int>>& stones)
    {
        
        int v=stones.size();
        parent.resize(v);
        rank.resize(v , 1);
        for(int i=0;i<stones.size();i++)
        {
            parent[i]=i;
        }

        int edge=0;
        for(int i=0;i<stones.size();i++)
        {
            int x=stones[i][0];
            int y=stones[i][1];
            for(int j=i+1;j<stones.size();j++)
            {
                int x_curr=stones[j][0];
                int y_curr=stones[j][1];
                
                if( (x_curr== x || y_curr==y ) && Union(i,j))
                {
                    edge++;
                }
            }
        }
        return edge;   
    }

    int removeStones(vector<vector<int>>& stones) {


        return helper(stones);


        
    }
};
