https://leetcode.com/problems/validate-binary-tree-nodes
// this question can also be solved using dfs traversal which is present in trees 
class Solution {
public:
    vector<int>rank;
    vector<int>parent;
    int find_parent(int x)
    {   
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=find_parent(parent[x]);
    }

    bool Union(int p,int c)
    {
        int p_parent=find_parent(p);
        int c_parent=find_parent(c);
        if(c!=c_parent || p_parent==c)
        {
            return false;
        }

        components--;
        
        parent[c_parent]=p_parent;
        return true;
    }


    int components;
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {

        parent.resize(n);
        rank.resize(n,0);
        for(int i=0;i<n;i++)
        {
            parent[i]=i;
        }

        components=n;
        for(int i=0;i<n;i++)
        {
            if(leftChild[i]!=-1)
            {
                if(!Union(i,leftChild[i]))
                {
                    return false;
                }
            }
            if(rightChild[i]!=-1)
            {
                if(!Union(i,rightChild[i]))
                {
                    return false;
                }
            }
           
        }

        return components==1;
        
    }
};
