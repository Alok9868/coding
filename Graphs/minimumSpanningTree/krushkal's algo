//krushkal's algo using dsu


//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution
{
	public:
	
	class node {
    public:
    int w;
    int u;
    int v;
    
    node(int w, int u, int v) {
        this->u = u;
        this->w = w;
        this->v = v;
    }
    
	    
	};
	
	
	vector<int>rank;
    vector<int>parent;
    int find_parent(int x)
    {   
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=find_parent(parent[x]);
    }

    void Union(int x,int y)
    {
        int x_parent=find_parent(x);
        int y_parent=find_parent(y);
        if(x_parent != y_parent)
        {
            if(rank[x_parent]>rank[y_parent])
            {
                parent[y_parent]=x_parent;
            }
            else if(rank[y_parent]>rank[x_parent])
            {
                parent[x_parent]=y_parent;
            }
            else
            {
                parent[y_parent]=x_parent;
                rank[x_parent]++;
            }
        }
    }
	
	static bool comp(const node &a, const node &b) {
            return a.w < b.w;
        }
	
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
    
        
        vector<node>allnodes;
           
        parent.resize(V,-1);
       
        rank.resize(V,0);
        
        for(int i=0;i<V;i++)
        {
            
            for(auto &temp:adj[i])
            {
                int u=i;
                int v=temp[0];
                int w=temp[1];
                // allnodes.push_back({w,,u,v});    
                allnodes.push_back(node(w,u,v));
            }
            parent[i]=i;
                
        }
        
        sort(allnodes.begin(),allnodes.end(),comp);
        
        int sum=0;
        for(int i=0;i<allnodes.size();i++)
        {
            
            int u=allnodes[i].u;
            int v=allnodes[i].v;
            int w=allnodes[i].w;
            
            int u_parent=find_parent(u);
            int v_parent=find_parent(v);
            if(u_parent != v_parent )
            {
                Union(u,v);
                sum+=w;
            }
        }
        
        return sum;
        
        
        
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
