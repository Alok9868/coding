https://leetcode.com/problems/design-graph-with-shortest-path-calculator/?envType=daily-question&envId=2023-11-12

class Graph {
public:

    vector<vector<pair<int,int>>>graph;
    int vertices;

    int bfs(int node1,int node2)
    {
        queue<pair<int,int>>q;
        q.push({node1,0});
        vector<int>weight(vertices,INT_MAX);
        weight[node1]=0;
        while(!q.empty())
        {
            pair<int,int>front=q.front();
            q.pop();
            int u=front.first;
            int u_weight=front.second;
            for(auto &it:graph[u])
            {
                int v=it.first;
                int v_weight=it.second;
                if(v_weight+u_weight < weight[v])
                {
                    weight[v]=v_weight+u_weight;
                    q.push({v,weight[v]});
                }
            }
        }

        return weight[node2];
    }
    Graph(int n, vector<vector<int>>& edges) {
        

        // graph=edges;
        graph.resize(n);
        vertices=n;
        for(int i=0;i<edges.size();i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            int weight=edges[i][2];
            graph[u].push_back({v,weight});
        }

    }
    
    void addEdge(vector<int> edge) {
        
         int u=edge[0];
         int v=edge[1];
         int weight=edge[2];
         graph[u].push_back({v,weight});
    }
    
    int shortestPath(int node1, int node2) {

        
        int ans= bfs(node1,node2);
        if(ans==INT_MAX)
        {
            return -1;
        }
        return ans;
    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */
