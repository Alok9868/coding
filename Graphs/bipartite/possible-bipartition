https://leetcode.com/problems/possible-bipartition/

class Solution {
public:

    bool checkIfBipartite( vector<int>adj[] ,vector<int>&color , int src)
    {

        queue<pair<int,int>>q;
        color[src]=0;
        q.push({src,0});
        while(!q.empty())
        {   
            int top=q.front().first;
            int top_col=q.front().second;
            q.pop();
            for(auto &it : adj[top])
            {
                int col= (top_col+1)%2;
                if( color[it] == top_col)
                {
                    return false;
                }
                if(color[it]==-1)
                {   
                    color[it]=col;
                    q.push({it,col});
                }
            }
        }

        return true;

    }
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {

        if(dislikes.size()==0)
        {
            return true;
        }

        vector<int>adj[n+1];
        for(int i=0;i<dislikes.size();i++)
        {
            int u=dislikes[i][0];
            int v=dislikes[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int>color(n+1, -1);
        for(int i=1;i<=n;i++)
        {
            if(color[i]==-1)
            {
                if( ! checkIfBipartite(adj, color , i))
                {
                    return false;
                }
            }
        }

        return true;



    }
};
