https://leetcode.com/problems/parallel-courses-iii/?envType=daily-question&envId=2023-10-18
class Solution {
public:
  
    int minimumTime(int n, vector<vector<int>>& relations, vector<int>& time) {

        vector<int>indegree(n+1,0);
        vector<int>adj[n+1];
        for(int i=0;i<relations.size();i++)
        {
            int u=relations[i][0];
            int v=relations[i][1];
            adj[u].push_back(v);
            indegree[v]++;
        }

        

        queue<int>q;
        vector<int>maxtime(n+1,0);
         int totaltime=0;
        for(int i=1;i<=n;i++)
        {
           
            maxtime[i]=time[i-1];
            totaltime=max(totaltime,maxtime[i]);
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
        vector<bool>vis(n+1,false);
       
        while(!q.empty())
        {
            int u=q.front();
            q.pop();
            for(auto it:adj[u])
            {
                indegree[it]--;
                int course_time=maxtime[u]+time[it-1];
                maxtime[it]=max(maxtime[it] ,course_time );
                totaltime=max(totaltime , maxtime[it]);
                if(indegree[it]==0)
                {
                    q.push(it);
                }
                
            }
        }

        return totaltime;
    }
};
