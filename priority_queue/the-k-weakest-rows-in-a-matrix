https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/description


class Solution {
public:

    int countSoldiers(vector<int>&temp)
    {
        int low=0;
        int high=temp.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=(high-low)/2 + low;
            if(temp[mid]==1)
            {
                ans=mid;
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }

        return ans+1;
    }

    class comp
    {
        public :
        bool operator()(const pair<int,int>&a ,const pair<int,int>&b)
        {
            if(a.first < b.first)
            {
                return true;
            }
            if(a.first == b.first)
            {
                return a.second < b.second;
            }
            return false;
        }


    };

    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        

        vector<int>ans;
        priority_queue< pair<int,int> ,vector< pair<int,int> > ,comp>pq;
        for(int i=0;i<mat.size();i++)
        {
            int cnt=countSoldiers(mat[i]);
            if(pq.size()==k)
            {
                if(pq.top().first > cnt)
                {
                    pq.pop();
                    pq.push({cnt,i});
                }
            }
            else
            {
                pq.push({cnt,i});
            }
        }

        while(!pq.empty())
        {
            ans.push_back(pq.top().second);
            pq.pop();
        }

        reverse(ans.begin(),ans.end());
        return ans;

    }
};
