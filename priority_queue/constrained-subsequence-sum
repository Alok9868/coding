//https://leetcode.com/problems/constrained-subsequence-sum/
https://www.youtube.com/watch?v=tWhboGihflM&t=3035s&ab_channel=codestorywithMIK
class Solution {
public:


    int k;
    int helper(vector<int>& nums, int idx,int previdx ,
    vector<vector<int>>&dp)
    {   
        if(idx==nums.size())
        {
            return 0;
        }
        
        if(dp[idx][previdx+1]!=-1)
        {
            return dp[idx][previdx+1];
        }
        int take=INT_MIN;
        if(previdx==-1 || idx-previdx<=k)
        {
            take=helper(nums,idx+1,idx,dp)+nums[idx];
        }
        
        int nottake=helper(nums,idx+1,previdx,dp);

        return dp[idx][previdx+1]= max(take,nottake);

    }   

    class comp
    {
        public:
        bool  operator()(pair<int,int>&a,pair<int,int>&b)
        {
            return a.first<b.first;
        }
    };
    int constrainedSubsetSum(vector<int>& nums, int k) {

    
        int result=nums[0];
        priority_queue<pair<int,int> , vector<pair<int,int> > ,
        comp >pq;
        pq.push({nums[0],0});
        for(int i=1;i<nums.size();i++)
        {
           while(!pq.empty() && i-pq.top().second>k)
           {
               pq.pop();
           }

           int curr_result=max(nums[i],nums[i]+pq.top().first);
           pq.push({curr_result,i});
           result=max(result,curr_result);
        }   

        return result;
    }
};
