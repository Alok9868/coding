https://leetcode.com/problems/cheapest-flights-within-k-stops/description/?envType=daily-question&envId=2024-02-23
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
            vector<pair<int,int>>adj[n];
            for(int i=0;i<flights.size();i++)
            {
                int u=flights[i][0];
                int v=flights[i][1];
                int cost=flights[i][2];
                adj[u].push_back({v,cost});
            }

            vector<int>ans(n,INT_MAX);
            ans[src]=0;
            queue<pair<int,int>>q;
            q.push({src,0});
            while(!q.empty() && k!=-1)
            {
                int size=q.size();
                while(size--)
                {
                    int curr_src=q.front().first;
                    int curr_cost=q.front().second;
                    q.pop();
                    for(auto it:adj[curr_src])
                    {
                        int dest=it.first;
                        int cost=it.second;
                        int curr_dest_cost=cost+curr_cost;
                        if(curr_dest_cost < ans[dest])
                        {
                            cout<<ans[dest]<<endl;
                            ans[dest]=curr_dest_cost;
                            q.push({dest,curr_dest_cost});
                        }
                    }
                } 
                k--;
            }


            if(ans[dst]==INT_MAX)
            {
                return -1;
            }
            return ans[dst];

    }
};
