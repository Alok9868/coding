https://leetcode.com/problems/redundant-connection/?envType=daily-question&envId=2025-01-29


class Solution {
public:
    int find_parent(int x)
    {   
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=find_parent(parent[x]);
    }

    bool Union(int x,int y)
    {
        int x_parent=find_parent(x);
        int y_parent=find_parent(y);
        if(x_parent != y_parent)
        {
            if(rank[x_parent]>rank[y_parent])
            {
                parent[y_parent]=x_parent;
            }
            else if(rank[y_parent]>rank[x_parent])
            {
                parent[x_parent]=y_parent;
            }
            else
            {
                parent[y_parent]=x_parent;
                rank[x_parent]++;
            }
            return true;
        }
        return false;
    }

    vector<int>rank;
    vector<int>parent;
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {

        int n=edges.size();
        vector<int>result;
        rank.resize(n+1,0);
        parent.resize(n+1);
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
        }

        for(int i=0;i<n;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            if(!Union(u,v))
            {
                result.push_back(u);
                result.push_back(v);
            }
        }

        return result;

    }
};
