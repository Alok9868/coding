//leetcode linkk
https://leetcode.com/problems/number-of-operations-to-make-network-connected/

class Solution {
public:


    vector<int>rank;
    vector<int>parent;
    int find_parent(int x)
    {   
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=find_parent(parent[x]);
    }

    bool Union(int x,int y)
    {
        int x_parent=find_parent(x);
        int y_parent=find_parent(y);
        if(x_parent != y_parent)
        {
            if(rank[x_parent]>rank[y_parent])
            {
                parent[y_parent]=x_parent;
            }
            else if(rank[y_parent]>rank[x_parent])
            {
                parent[x_parent]=y_parent;
            }
            else
            {
                parent[y_parent]=x_parent;
                rank[x_parent]++;
            }
            return true;
        }
        return false;
    }




    int makeConnected(int n, vector<vector<int>>& c) {
        

        if(c.size()< n-1)
        {
            return -1;   
        }

        parent.resize(n,0);
        rank.resize(n,0);
        for(int i=0;i<n;i++)
        {
            parent[i]=i;
        }



        int ans=0;

        for(auto it:c)
        {
            int first=it[0];
            int second=it[1];
            Union(first,second);
        }


        for(int i=1;i<n;i++)
        {
            if(Union(0,i))
            {
                ans++;
            }
        }



        return ans;
    }
};
