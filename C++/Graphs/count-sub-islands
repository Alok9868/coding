https://leetcode.com/problems/count-sub-islands/description/?envType=daily-question&envId=2024-08-28

class Solution {
public:

    int xdir[4]={1,-1,0,0};
    int ydir[4]={0,0,1,-1};

    bool isValid(int x,int y)
    {
        if(x>=0 && x<n && y>=0 && y<m)
        {
            return true;
        }
        return false;
    }

    int n,m;

    int bfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2,vector<vector<bool>>&vis
    , int i, int j)
    {
        queue<pair<int,int>>q;
        q.push({i,j});
        bool island=true;
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            for(int k=0;k<4;k++)
            {
                int x_curr=x+xdir[k];
                int y_curr=y+ydir[k];
                if(isValid(x_curr,y_curr) && !vis[x_curr][y_curr] )
                {
                    if(grid2[x_curr][y_curr]==1)
                    {
                        if(grid1[x_curr][y_curr]==1)
                        {
                            q.push({x_curr,y_curr});
                            vis[x_curr][y_curr]=1;
                        }
                        else
                        {
                           island=false;
                        }
                    }
                }
            }

        }

        return island;

    }


    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        n=grid1.size();
        m=grid1[0].size();
        vector<vector<bool>>vis(n,vector<bool>(m,false));
        int subIslands=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid1[i][j] && grid2[i][j])
                {
                    subIslands+=bfs(grid1,grid2,vis,i,j);
                }
            }
        }
        
        return subIslands;
 
    }
};
