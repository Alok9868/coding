//https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/description/
// LEETCODE VERY HARD
// this question can be solved by using krushkal algo and dfs  , we first calcuate mst weight and then , we add and remove each edge to see 
// we are able to create any edge or not , if we get weight greater than mst weight then that will be critical , and if we are getting weight 
// equal to mst by removing that edge , then that will be pseudo critical edge .
// THERE IS ONE EDGE CASE IN WHICH WE IGNORE MST , EX - ALL NODES ARE NOT CONNECTED , FOR THAT WE HAVE TO CHECK IF ALL NODES ARE CONNECTED OR NOT 

class Solution {
public:


    class node {
    public:
    int w;
    int u;
    int v;
    
    node(int w, int u, int v) {
        this->u = u;
        this->w = w;
        this->v = v;
    }
    
	    
	};
	
	
	vector<int>rank;
    vector<int>parent;
    int find_parent(int x)
    {   
        if(x==parent[x])
        {
            return x;
        }
        return parent[x]=find_parent(parent[x]);
    }

    void Union(int x,int y)
    {
        int x_parent=find_parent(x);
        int y_parent=find_parent(y);
        if(x_parent != y_parent)
        {
            if(rank[x_parent]>rank[y_parent])
            {
                parent[y_parent]=x_parent;
            }
            else if(rank[y_parent]>rank[x_parent])
            {
                parent[x_parent]=y_parent;
            }
            else
            {
                parent[y_parent]=x_parent;
                rank[x_parent]++;
            }
        }
    }
	
	static bool comp(const vector<int>&a, const vector<int> &b) {
            return a[2] < b[2];
        }
	
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int krushhKal(int V, vector<vector<int>>&edges , int skip_edge,int add_edge)
    {
           
        parent.resize(V,-1);
       
        rank.resize(V,0);
        
        for(int i=0;i<V;i++)
        {
            parent[i]=i;       
        }

        int edges_connected=V-1;
        
        int sum=0;
        if(add_edge!=-1)
        {
             Union(edges[add_edge][0],edges[add_edge][1]);
             sum+=edges[add_edge][2];
             edges_connected--;
        }

       
        for(int i=0;i<edges.size();i++)
        {
            if(skip_edge==i)
            {
                continue;
            }
            int u=edges[i][0];
            int v=edges[i][1];
            int w=edges[i][2];
            
            int u_parent=find_parent(u);
            int v_parent=find_parent(v);
            if(u_parent != v_parent )
            {
                Union(u,v);
                sum+=w;
                edges_connected--;
            }
        }

        for(int i=0;i<V;i++)
        {
            if(find_parent(i)!=find_parent(0))
            {
                return INT_MAX;
            }
        }
      
        return sum;
        
    }
    
    vector<vector<int>> findCriticalAndPseudoCriticalEdges(int n, vector<vector<int>>& edges) {

        for(int i=0;i<edges.size();i++)
        {
            edges[i].push_back(i);
        }

        sort(edges.begin(),edges.end(),comp);

        int mst_weight=krushhKal(n,edges,-1,-1);
        vector<vector<int>>ans;
        vector<int>critical;
        vector<int>pseudocritical;
         for(int i=0;i<edges.size();i++)
        {
           if( krushhKal(n,edges,i,-1) > mst_weight)
           {
               critical.push_back(edges[i][3]);
           }
           else if(krushhKal(n,edges,-1,i) == mst_weight)
           {
                pseudocritical.push_back(edges[i][3]);
           }
        }

        ans.push_back(critical);
        ans.push_back(pseudocritical);
        return ans;






        
    }
};

