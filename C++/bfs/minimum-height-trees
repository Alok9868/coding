https://leetcode.com/problems/minimum-height-trees/?envType=daily-question&envId=2024-04-23
class Solution {
public:


    int bfs(vector<int>adj[], int root)
    {
        queue<pair<int,int>>q;
        q.push({root,-1});
        int height=0;
        while(!q.empty())
        {
            int size=q.size();
            while(size--)
            {   
                int front=q.front().first;
                int parent=q.front().second;
                q.pop();
                // for(int i=0;i<adj[front].size();i++)
                // {

                // }
                for(int it:adj[front])
                {
                    if(it!=parent)
                    {
                        q.push({it,front});
                    }
                }
            }
            height++;
        }
        return height-1;
    }

    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {

        vector<int>ans;
        vector<int>adj[n];
        for(int i=0;i<edges.size();i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }   
        int min_height=INT_MAX;
        for(int i=0;i<n;i++)
        {
            int height=bfs(adj,i);
            if(height<min_height)
            {
                min_height=height;
                ans={};
                ans.push_back(i);
            }
            else if(height==min_height)
            {
                ans.push_back(i);
            }
        }

        return ans;

        
    }


    // second soln
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {

            if(n==1)
            {
                return {0};
            }
            vector<int>ans;
            vector<int>adj[n];
            vector<int>indegree(n,0);
            for(int i=0;i<edges.size();i++)
            {
                int u=edges[i][0];
                int v=edges[i][1];
                adj[u].push_back(v);
                adj[v].push_back(u);
                indegree[u]++;
                indegree[v]++;
            }

            int min_height=INT_MAX;
            queue<int>q;
            vector<int>vis(n,0);
            int cnt=0;
            int maxIndegree=INT_MIN;
            for(int i=0;i<n;i++)
            {
                if(indegree[i]==1)
                {
                    cnt++;
                    q.push(i);
                }
                if(indegree[i]>maxIndegree)
                {
                    maxIndegree=indegree[i];
                }
            }

            while(n>2)
            {
                int levels=q.size();
                n-=levels;
                while(levels--)
                {
                    int front=q.front();
                    q.pop();

                    for(auto it:adj[front])
                    {
                        if(indegree[it]>1)
                        {
                            indegree[it]--;
                            if(indegree[it]==1)
                            {
                                cnt++;
                                q.push(it);
                            }
                        }
                    }
                }
            }

            while(!q.empty())
            {
                ans.push_back(q.front());
                q.pop();
            }

            return ans;


        }



};
