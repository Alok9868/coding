class TrieNode
{
    public:
    char ch;
    TrieNode**children;
    bool isTerminal;

    TrieNode(char ch)
    {
        children=new TrieNode*[26];
        for(int i=0;i<26;i++)
        {
            children[i]=NULL;
        }
        this->ch=ch;
        this->isTerminal=false;
    }
};



class Trie {
public:

    TrieNode*root;
    Trie() {

        root=new TrieNode('\0');
    }
    
    void insert(string word) {

        int n=word.length();
        TrieNode*temp=root;
        for(int i=0;i<n;i++)
        {
            int index=word[i]-'a';
            if(temp->children[index]==NULL)
            {
                temp->children[index]=new TrieNode(word[i]);
            }
            temp=temp->children[index];
        }

        temp->isTerminal=true;
        
    }
    
    bool search(string word) {

        int n=word.length();
        TrieNode*temp=root;
        for(int i=0;i<n;i++)
        {
            int index=word[i]-'a';
            if(temp->children[index]==NULL)
            {
                return false;
            }
            temp=temp->children[index];
        }

        if(temp->isTerminal==false)
        {
            return false;
        }

        return true;
        
    }
    
    bool startsWith(string prefix) {

        int n=prefix.length();
        TrieNode*temp=root;
        for(int i=0;i<n;i++)
        {
            int index=prefix[i]-'a';
            if(temp->children[index]==NULL)
            {
                return false;
            }
            temp=temp->children[index];
        }

        return true;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
