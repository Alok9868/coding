https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet/


class Solution {
public:
    vector<int> tree;
    int n;
    int buildSegmentTree(vector<int>& nums, int idx, int l, int r,
                         vector<int>& heights) {
        if (l == r) {
            tree[idx] = l;
            return tree[idx];
        }

        int mid = (r + l) / 2;
        int left_idx = 2 * idx + 1;
        int right_idx = 2 * idx + 2;
        int left_max_idx = buildSegmentTree(nums, left_idx, l, mid, heights);
        int right_max_idx =
            buildSegmentTree(nums, right_idx, mid + 1, r, heights);
        if (heights[left_max_idx] >= heights[right_max_idx]) {
            tree[idx] = left_max_idx;
        } else {
            tree[idx] = right_max_idx;
        }

        return tree[idx];
    }

    int findMaxInSegmentTree(int idx, int left, int right, int left_range,
                             int right_range, vector<int>& heights) {
        if (right < left_range) {
            return -1;
        } else if (left > right_range) {
            return -1;
        } else {
            if (left_range >= left && right_range <= right) {
                return tree[idx];
            } else {

                int left_idx = 2 * idx + 1;
                int right_idx = 2 * idx + 2;
                int mid = (right_range + left_range) / 2;

                int left_max_idx = findMaxInSegmentTree(
                    left_idx, left, right, left_range, mid, heights);
                int right_max_idx = findMaxInSegmentTree(
                    right_idx, left, right, mid + 1, right_range, heights);
                if (left_max_idx == -1) {
                    return right_max_idx;
                }
                if (right_max_idx == -1) {
                    return left_max_idx;
                }
                if (heights[left_max_idx] >= heights[right_max_idx]) {
                    return left_max_idx;
                }
                return right_max_idx;
            }
        }
    }

    vector<int> leftmostBuildingQueries(vector<int>& heights,
                                        vector<vector<int>>& queries) {

        this->n = heights.size();
        tree.resize(4 * n);
        buildSegmentTree(heights, 0, 0, n - 1, heights);
        vector<int> ans;
        for (int i = 0; i < queries.size(); i++) {
            int alice = min(queries[i][0], queries[i][1]);
            int bob = max(queries[i][0], queries[i][1]);

            if (alice == bob || heights[alice] < heights[bob]) {
                ans.push_back(bob);
                continue;
            }

            int l = bob + 1;
            int r = n - 1;
            int possible_ans = INT_MAX;

            while (l <= r) {
                int mid = (r + l) / 2;
                int right_maxi = findMaxInSegmentTree(0, l, mid, 0, n - 1,heights);
                if (heights[right_maxi] > heights[alice] &&
                    heights[right_maxi] >= heights[bob]) {
                    possible_ans = min(possible_ans, right_maxi);
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            if (possible_ans == INT_MAX) {
                ans.push_back(-1);
            } else {
                ans.push_back(possible_ans);
            }
        }

        return ans;
    }
};
