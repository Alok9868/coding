https://leetcode.com/problems/longest-increasing-subsequence/description/?envType=daily-question&envId=2024-01-05

class Solution {
public:

    int helper(vector<int>& nums , int idx , int prev , 
       vector<vector<int>>&dp )
    {
        if(idx==nums.size())
        {
            return 0;
        }

        if(dp[idx][prev+1]!=-1)
        {
            return dp[idx][prev+1];
        }

        int pick=0,notpick;
        if(prev==-1 || nums[prev]<nums[idx])
        {
           pick= helper(nums,idx+1,idx ,dp)+1;
        }
        notpick=helper(nums,idx+1,prev , dp);
        return dp[idx][prev+1]=max(pick,notpick);

    }


    int lengthOfLIS(vector<int>& nums) {
        
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(n,-1));
        return helper(nums,0 ,-1 , dp);


    }
};
// Optimized soln O(nlogn)

class Solution {
public:

    bool findPos(vector<int>&temp , int num)
    {
        int low=0;
        int high=temp.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=(high-low)/2+low;
            if(temp[mid]<=num)
            {
                ans=mid;
                low=mid+1;
            }
            else if(temp[mid]>num)
            {
                high=mid-1;
            }
        }

        return ans;
    }

    int lengthOfLIS(vector<int>& nums) {

        
        vector<int>temp;
        int n=nums.size();
        temp.push_back(nums[0]);
        for(int i=0;i<n;i++)
        {
            if(nums[i] > temp.back())
            {
                temp.push_back(nums[i]);
            }
            int idx=lower_bound(temp.begin(),temp.end(),nums[i])-temp.begin();
            temp[idx]=nums[i];
        }

        return temp.size();
        



    }
};


