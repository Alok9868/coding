https://leetcode.com/problems/longest-string-chain


// this soln can also be solved by hashmap , which is present in hashmap dir .

class Solution {
public:


    bool isPredecessor(string s1,string s2)
    {
        if(s1.size()!=s2.size()+1)
        {
            return false;
        }

        int cnt=0;
        int k=0;
        for(int i=0;i<s1.size();i++)
        {
            if(s1[i]!=s2[k])
            {
                cnt++;
            }
            else
            {
                k++;
            }
        }

        if(cnt==1)
        {
            return true;
        }
        return false;
    }

    int helper( vector<string>& words, int idx ,vector<int>&dp ) 
    {
        
        int ans=0;
        if(dp[idx]!=-1)
        {
            return dp[idx];
        }

        for(int i=0;i<words.size();i++)
        {
             if(isPredecessor(words[idx],words[i]))
            {
                ans=max(helper(words,i,dp),ans);
            }
        }

        return dp[idx]=ans+1;
    }

    static bool comp(string &a, string &b )
    {
        return a.length()>b.length();
    }
    int longestStrChain(vector<string>& words) {

        sort(words.begin(),words.end(),comp);
        vector<int>dp(words.size(),-1);
        int ans=0;
        for(int i=0;i<words.size();i++)
        {
            if(dp[i]!=-1)
            {
                ans=max(ans,dp[i]);
                continue;
            }
            ans=max(ans,helper(words,i,dp));
        }
        
        return ans;
    }
};
