/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


//https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/description/
class Solution {
public:

    int height(TreeNode*root)
    {
        if(!root)
        {
            return 0;
        }

        int left=height(root->left);
        int right=height(root->right);
        return max(left,right)+1;
    }


    int ans;
    pair<int,int> helper(TreeNode*root, int start)
    {
        pair<int,int>curr;
        curr.first=-1;
        curr.second=0;
        if(!root)
        {
            return curr;
        }

        if(root->val==start)
        {
            ans=max(ans, height(root)-1);
            // this is the time taken
            curr.first=0;
            curr.second=1; 
            return curr;
        }


        pair<int,int> left=helper(root->left,start);
        pair<int,int> right=helper(root->right,start);
        curr.second=max(left.second,right.second)+1;
        if(left.first!=-1)
        {   
            curr.first=left.first+1;
            curr.second=left.second+1;
            ans=max(ans,right.second+left.second);
        }
        if(right.first!=-1)
        {
            curr.first=right.first+1;
            curr.second=right.second+1;
            ans=max(ans,left.second+right.second);
        }

        return curr;





    }

    int amountOfTime(TreeNode* root, int start) {

        ans=0;
        helper(root,start);
        return ans;
        
    }
};
