https://leetcode.com/problems/find-mode-in-binary-search-tree/?envType=daily-question&envId=2023-11-03

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:


    void helper(TreeNode*root , unordered_map<int,int>&umap) 
    {
        if(!root)
        {
            return ;
        }


        umap[root->val]+=1;
        helper(root->left,umap);
        helper(root->right,umap);
    }

    vector<int> findMode(TreeNode* root) {

    unordered_map<int,int>umap;

    helper(root,umap);  
    int maxi=0;
    vector<int>ans;
    for(auto it:umap)
    {
        if(it.second > maxi)
        {
            vector<int>res;
            res.push_back(it.first);
            ans=res;
            maxi=it.second;
        }
        else if(it.second == maxi)
        {
            ans.push_back(it.first);
        }
    }


// APPROACH -2 
WITHOUT SPACE 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int currStreak;
    int currEle;
    int maxStreak;
    void helper(TreeNode *root , vector<int>&result)
    {
        if(!root)
        {
            return ;
        }

        helper(root->left,result);

        if(currEle == root->val)
        {
            currStreak++;
        }
        else
        {
            currEle=root->val;
            currStreak=1;
        }

        if(currStreak >maxStreak )
        {
            result={};
            maxStreak=currStreak;
        }

        if(currStreak==maxStreak)
        {
            result.push_back(root->val);
        }

        helper(root->right,result);



    }


    vector<int> findMode(TreeNode* root) {
        
        currEle=0;
        currStreak=0;
        vector<int>result;
        helper(root,result);
        return result;
    }
};



    return ans;
    }
};
