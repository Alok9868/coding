/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

https://leetcode.com/problems/delete-nodes-and-return-forest/
class Solution {
public:

    vector<TreeNode*>ans;
    TreeNode*helper(TreeNode* root,  unordered_set<int>&uset)
    {
        if(!root)
        {
            return root;
        }

        root->left=helper(root->left,uset);
        root->right=helper(root->right,uset);
        if(uset.find(root->val)!=uset.end())
        {
            if(root->left)
            {
                ans.push_back(root->left);
            }
            if(root->right)
            {
                ans.push_back(root->right);
            }
            delete(root);
            return NULL;
        }

        return root;
    }



    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {


        unordered_set<int>uset;
        for(int i:to_delete)
        {
            uset.insert(i);
        }
        TreeNode*newRoot=helper(root,uset);
        if(newRoot!=NULL)
        {
            ans.push_back(newRoot);
        }
        return ans; 

        
    }
};
