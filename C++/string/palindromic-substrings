
https://leetcode.com/problems/palindromic-substrings/description/?envType=daily-question&envId=2024-02-10
class Solution {
public:


    bool isPalindrome(string &temp , int i, int j)
    {
        while(i<j)
        {
            if(temp[i]!=temp[j])
            {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    int countSubstrings(string s) {

        int n=s.size();
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int len=1;len<=n-i;len++)
            {
                if(isPalindrome(s,i,i+len-1))
                {
                    ans++;
                }
            }
        }

        return ans;
        
    }
};


//Optimized approach


class Solution {
public:

    int evenLength(string &s , int i)
    {
        int j=i;
        int k=i-1;
        int n=s.size();
        int cnt=0;
        while(k>=0 && j<n)
        {
            if(s[j]!=s[k])
            {
                break;
            }
            k--;
            j++;
            cnt++;
        }

        return cnt;
    }
    int oddLength(string &s , int i)
    {
        int j=i+1;
        int k=i-1;
        int n=s.size();
        int cnt=1;
        while(k>=0 && j<n)
        {
            if(s[j]!=s[k])
            {
                break;
            }
            k--;
            j++;
            cnt++;
        }
        return cnt;
    }
    int countSubstrings(string s) {


        int ans=0;
        int n=s.size();
        for(int i=0;i<n;i++)
        {
            ans+=evenLength(s,i);
            ans+=oddLength(s,i);
        }

        return ans;
        
    }
};
