https://leetcode.com/problems/subarrays-with-k-different-integers/?envType=daily-question&envId=2024-03-30

class Solution {
public:

    int slidingWindow(vector<int>& nums, int k)
    {
        int right=0;
        int left=0;
        int n=nums.size();
        unordered_map<int,int>umap;
        int ans=0;
        while(right<n)
        {
            umap[nums[right]]++;
            while(umap.size()>k)
            {
                umap[nums[left]]--;
                if(umap[nums[left]]==0)
                {
                    umap.erase(nums[left]);
                }
                left++;
            }
            ans+=right-left+1;
            right++;
        }

        return ans;
    }


    int subarraysWithKDistinct(vector<int>& nums, int k) {


        int subarrayWithLessThanOrEqualToK=slidingWindow(nums,k);
        int subarrayWithLessThanOrEqualToK1=slidingWindow(nums,k-1);
        return subarrayWithLessThanOrEqualToK-subarrayWithLessThanOrEqualToK1;
        
    }
};
