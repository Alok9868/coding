https://leetcode.com/problems/employee-free-time/


/*
// Definition for an Interval.
class Interval {
public:
    int start;
    int end;

    Interval() {}

    Interval(int _start, int _end) {
        start = _start;
        end = _end;
    }
};
*/

class Solution {
public:
    vector<Interval> employeeFreeTime(vector<vector<Interval>> schedule) {

        int n = schedule.size();
        vector<Interval> temp;

        // [[[1,2],[5,6]],[[1,3]],[[4,10]]]

        //
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < schedule[i].size(); j++) {
                Interval temp1 = schedule[i][j];
                temp.push_back(temp1);
            }
        }

        sort(temp.begin(), temp.end(),
             [](const auto& a, const auto& b) { return a.start < b.start; });

        vector<Interval> result;
        Interval prev = temp[0];
        for (int i = 1; i < temp.size(); i++) {
            Interval curr = temp[i];
            if (prev.end < curr.start) {
                int start = prev.end;
                int end = curr.start;
                result.push_back(Interval(start, end));
                prev = curr;
            } else {
                prev.end = max(curr.end, prev.end);
            }
        }

        return result;
    }
};
