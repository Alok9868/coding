https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/?envType=daily-question&envId=2023-10-10


class Solution {
public:

    int binarySearchleft(vector<int>& nums , int target)
    {
        int low=0;
        int high=nums.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=(high-low)/2+low;
            if(nums[mid]<target)
            {   
                ans=mid;
                low=mid+1;   
            }
            else
            {
                high=mid-1;
            }
        }

        return ans;
    }

    int binarySearchright(vector<int>& nums , int target)
    {
        int low=0;
        int high=nums.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=(high-low)/2+low;
            if(nums[mid]>target)
            {   
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }

        if(ans==-1)
        {
            return 0;
        }

        return nums.size()-ans;
    }




    int minOperations(vector<int>& nums) {
        
        
        int result=INT_MAX;
        vector<int>arr;
        set<int>set;
        for(auto it:nums)
        {
            set.insert(it);
        }
        for(auto &it:set)
        {
            arr.push_back(it);
        }
        int n=arr.size();
        for(int i=0;i<n;i++)
        {
            int mini=arr[i];
            int maxi=mini + nums.size() -1;
            
            int j = upper_bound(begin(arr), end(arr), maxi) - begin(arr);
            
            int in_range  = j - i;
            int out_range = nums.size() - in_range;
            
            result = min(result, out_range);
            // operations+=duplicate;
            // for(int j=0;j<n;j++)
            // {
            //     if(nums[j]>=mini && nums[j]<=maxi && set.find(nums[j])==set.end())
            //     {
            //         set.insert(nums[j]);
            //     }
            //     else
            //     {
            //         operations++;
            //     }
            // }
         
        }


        return result;   

    }
};
