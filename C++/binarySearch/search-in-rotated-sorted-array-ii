//https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/


class Solution {
public:
 bool binarySearch(vector<int>& nums, int target,int low,int high)
    {
      
        while(low<=high)
        {
            int mid=(high-low)/2+low;
            if(nums[mid]==target)
            {
                return true;
            }
            else if(nums[mid]>target)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return false;
    }

    bool search(vector<int>& nums, int target) {
        if(nums.size()==1)
        {
            if(nums[0]==target)
            {
                return true;
            }
            return false;
        }

        int low=0;
        int high=nums.size()-1;
        while(low<high)
        {
            while(low<high && nums[low]==nums[low+1])
            {
                low++;
            }
            while(low<high && nums[high]==nums[high-1])
            {
                high--;
            }
            int mid=(high-low)/2+low;
            if(nums[mid]>nums[high])
            {
                low=mid+1;
            }
            else
            {
                high=mid;
            }
        }

        if(binarySearch(nums,target,0,high-1))
        {
            return true;
        }
        if(binarySearch(nums,target,high,nums.size()-1))
        {
            return true;
        }

        return false;

        
    }
};
