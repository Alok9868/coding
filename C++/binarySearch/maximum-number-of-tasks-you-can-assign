https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/?envType=daily-question&envId=2025-05-01


class Solution {
public:
    int binarySearch(int l, int r, vector<int>& workers, int target) {

        int ans = -1;
        while (l <= r) {
            int mid = (r - l) / 2 + l;
            if (workers[mid] >= target) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }

    bool checkTasksCompletion(vector<int>& tasks, vector<int>& workers,
                              int pills, int strength, int mid) {
        int pillsUsed = 0;
        multiset<int> st(workers.begin(), workers.begin() + mid);
        for (int i = mid - 1; i >= 0; i--) {
            int curr_task = tasks[i];
            auto it = prev(st.end());
            if (*it >= curr_task) {
                st.erase(it);
            } else if (pillsUsed >= pills) {
                return false;
            } else {
                auto weakest_worker = st.lower_bound(curr_task - strength);
                if (weakest_worker == st.end()) {
                    return false; // we dont get any worker
                }
                st.erase(weakest_worker);
                pillsUsed++;
            }
        }
        return true;
    }

    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills,
                      int strength) {

        // task  1 2 3
        // worker 2 3 3
        // worker lower bound - task - pill = 3

        // worker - 1 3 4
        // task - 1 2 3
        // pills = 1 , strenght - 1

        // worker - strength = 1 - 1 = 0
        // lower bound - 9 9 9

        int n = workers.size();
        int m = tasks.size();
        sort(tasks.begin(), tasks.end());                     // 1 2 3
        sort(workers.begin(), workers.end(), greater<int>()); // 0 3 3

        int curr_task_idx = 0;
        int ans = 0;
        int l = 0, r = min(n, m) ;

        while (l <= r) {
            int mid = (r - l) / 2 + l;
            // check if we can complete mid tasks or not
            if (checkTasksCompletion(tasks, workers, pills, strength,mid)) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
};
