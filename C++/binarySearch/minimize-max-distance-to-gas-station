https://leetcode.com/problems/minimize-max-distance-to-gas-station/description/


You are given an integer array stations that represents the positions of the gas stations on the x-axis. You are also given an integer k.

You should add k new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.

Let penalty() be the maximum distance between adjacent gas stations after adding the k new stations.

Return the smallest possible value of penalty(). Answers within 10-6 of the actual answer will be accepted.

 
Example 1:

Input: stations = [1,2,3,4,5,6,7,8,9,10], k = 9
Output: 0.50000
Example 2:

Input: stations = [23,24,36,39,46,56,57,65,84,98], k = 1
Output: 14.00000


class Solution {
public:
    bool isInteger(double num) { return std::floor(num) == num; }
    bool isPossible(vector<int>& stations, double dist, int k) {
        int cnt = 0;
        int n = stations.size();
        int curr_stations = 0;
        for (int i = 0; i < n - 1; i++) {
            double curr_gap = stations[i + 1] - stations[i];
            curr_stations += ceil(curr_gap / dist) - 1;
            if (curr_stations > k) {
                return false;
            }
        }
        return true;
    }

    double minmaxGasDist(vector<int>& stations, int k) {

        int n = stations.size();
        double low = 0;
        double high = 1e8;
        double ans = 0;
        while (high - low > 1e-6) {
            double mid = (high - low) / 2.0 + low;
            if (isPossible(stations, mid, k)) {
                ans = mid;
                high=mid;
            } else {
                low=mid;
            }
        }

        return ans;
    }
};
