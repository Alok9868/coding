https://leetcode.com/problems/median-of-two-sorted-arrays

first approach class Solution {
public:

    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {

        int k=0;
        int i=0;
        int j=0;
        int size = (nums1.size() + nums2.size());
        int firstIdx=size/2;
        int secondIdx=-1;
        if(size%2 ==0 )
        {
            secondIdx = firstIdx-1;
        }

        int median=0;
        while(i<nums1.size() && j<nums2.size())
        {
            int curr;
            if(nums1[i]<nums2[j])
            {
                curr=nums1[i];
                i++;
            }
            else
            {   
                curr=nums2[j];
                j++;
            }

            if(k==secondIdx)
            {
                median=curr;
            }
            if(k==firstIdx)
            {
                median+=curr;
                if(size%2 ==0 )
                {
                    return (median/2.0);
                }
                return median;
            }
            k++;
        }

        while(i<nums1.size())
        {
            int curr=nums1[i];
            i++;
            if(k==secondIdx)
            {
                median=curr;
            }
            if(k==firstIdx)
            {
                median+=curr;
                if(size%2==0 )
                {
                    return (median/2.0);
                }
                return median ;
            }
            k++;
        }
        while(j<nums2.size())
        {
            int curr=nums2[j];
            j++;
            if(k==secondIdx)
            {
                median=curr;
            }
            if(k==firstIdx)
            {
                median+=curr;
                if(size%2==0 )
                {
                    return (median/2.0);
                }
                return median ;
            }
            k++;
        }


        return 0;

    }
};



Second approach , and most imp approach 


class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        if(nums1.size() > nums2.size())
        {
            return findMedianSortedArrays(nums2,nums1);
        }

        //nums1 = 1, 5, 7,10
        //nums2 = 2, 3 ,9
        int m=nums1.size();
        int n=nums2.size();
        int l=0;
        int r=m;
        int first_set=(m+n+1)/2;
        while(l<=r)
        {
            int mid=l+(r-l)/2;

            int first_set_nums1= mid-1 >=0 ? nums1[mid-1] : INT_MIN; 
            int second_set_nums1= mid < m ? nums1[mid] : INT_MAX;
            int first_set_nums2= first_set-mid-1 >=0 ? nums2[first_set-mid-1] :    INT_MIN;
            int second_set_nums2= first_set-mid < n ? nums2[first_set-mid]: INT_MAX;

            

            if(first_set_nums1 <= second_set_nums2 && 
            first_set_nums2 <= second_set_nums1)
            {
                int first=max(first_set_nums1 , first_set_nums2);
                int second= min(second_set_nums1 , second_set_nums2);
                if((m+n)%2)
                {
                    return first;
                }
                return (first+second)/2.0;
            }

            else if(first_set_nums1 >second_set_nums2)
            {
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }   
        

        return 0;
        

    }
};





