https://leetcode.com/problems/count-the-number-of-fair-pairs/description/?envType=daily-question&envId=2024-11-13



class Solution {
public:
    int binarySearchlessThanNum(vector<int>&nums,int num,int low)
    {
        int high=nums.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=(high-low)/2+low;
            if(nums[mid]<=num)
            {
                ans=mid;
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }

        return ans;

    }

    int binarySearchlessGreaterThanNum(vector<int>&nums,int num,int low)
    {
        int high=nums.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=(high-low)/2+low;
            if(nums[mid]>=num)
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }

        return ans;
    }



    long long countFairPairs(vector<int>& nums, int lower, int upper) {

        int n=nums.size();

        long long pairs=0;

        sort(nums.begin(),nums.end());

        for(int i=0;i<n;i++)
        {
            int num=nums[i];

            int min_idx=lower_bound(nums.begin()+i+1,nums.end(),lower-nums[i])-nums.begin();
            int max_idx=upper_bound(nums.begin()+i+1,nums.end(),upper-nums[i])-nums.begin();

            if(min_idx!=-1)
            {
                pairs+=max_idx-min_idx;
            }

        }



        return pairs;

        
    }
};
