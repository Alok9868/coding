https://leetcode.com/problems/longest-unequal-adjacent-groups-subsequence-i/?envType=daily-question&envId=2025-05-15


class Solution {
public:
    vector<string> getLongestSubsequence(vector<string>& words,
                                         vector<int>& groups) {

        int n = words.size();
        // start from zero
        vector<string> ans;
        int first = -1;
        vector<int> zero;
        for (int i = 0; i < n; i++) {
            if (first != -1) {
                if (first == 1 && groups[i] == 1) {
                    first = 0;
                    zero.push_back(i);
                } else if (first == 0 && groups[i] == 0) {
                    first = 1;
                    zero.push_back(i);
                }
            } else {
                if (groups[i] == 0) { // first zero encountered
                    first = 1;
                    zero.push_back(i);
                }
            }
        }

        first = -1;
        vector<int> ones;
        for (int i = 0; i < n; i++) {
            if (first != -1) {
                if (first == 1 && groups[i] == 1) {
                    first = 0;
                    ones.push_back(i);
                } else if (first == 0 && groups[i] == 0) {
                    first = 1;
                    ones.push_back(i);
                }
            } else {
                if (groups[i] == 1) { // first one encountered
                    first = 0;
                    ones.push_back(i);
                }
            }
        }

        if (ones.size() > zero.size()) {
            for (int i = 0; i < ones.size(); i++) {
                ans.push_back(words[ones[i]]);
            }
        } else {
            for (int i = 0; i < zero.size(); i++) {
                ans.push_back(words[zero[i]]);
            }
        }

        return ans;
    }
};
