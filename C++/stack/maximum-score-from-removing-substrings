https://leetcode.com/problems/maximum-score-from-removing-substrings/?envType=daily-question&envId=2024-07-12

// using stack 
class Solution {
public:
    int maximumGain(string s, int x, int y) {
        int n     = s.length();
        int score = 0;

        string maxStr = (x > y) ? "ab" : "ba";
        string minStr = (x < y) ? "ab" : "ba";


        // int removedPairsCount = (n - temp_first.length()) / 2;
        // score                += removedPairsCount * max(x, y);

    
        // //Second Pass
        // string temp_second = removeSubstring(temp_first, minStr);
        // removedPairsCount  = (temp_first.length() - temp_second.length()) / 2;
        // score             += removedPairsCount * min(x, y);

          //First Pass
        string temp_first     = removeSubstring(s, maxStr);
        int L                 = temp_first.length();
        int removedPairsCount = (n - L) / 2;
        score                += removedPairsCount * max(x, y);


        //Second Pass
        string temp_second = removeSubstring(temp_first, minStr);
        removedPairsCount  = (L - temp_second.length()) / 2;
        score             += removedPairsCount * min(x, y);

        return score;
    }

private:
    string removeSubstring(string& s, string& matchStr) {
        

        int i=0; // for writing purpose 
        for(int j=0;j<s.size();j++)
        {
            s[i++]=s[j];
            if(i>1 && s[i-2]==matchStr[0] && s[i-1]==matchStr[1])
            {
                i-=2;
            }
        }

        s.erase(begin(s)+i,end(s));
        return s;
    }
};



// optimized approach - 
time - O(n)
space - O(1)
class Solution {
public:
    int maximumGain(string s, int x, int y) {
        int n     = s.length();
        int score = 0;

        string maxStr = (x > y) ? "ab" : "ba";
        string minStr = (x < y) ? "ab" : "ba";


        // int removedPairsCount = (n - temp_first.length()) / 2;
        // score                += removedPairsCount * max(x, y);

    
        // //Second Pass
        // string temp_second = removeSubstring(temp_first, minStr);
        // removedPairsCount  = (temp_first.length() - temp_second.length()) / 2;
        // score             += removedPairsCount * min(x, y);

          //First Pass
        string temp_first     = removeSubstring(s, maxStr);
        int L                 = temp_first.length();
        int removedPairsCount = (n - L) / 2;
        score                += removedPairsCount * max(x, y);


        //Second Pass
        string temp_second = removeSubstring(temp_first, minStr);
        removedPairsCount  = (L - temp_second.length()) / 2;
        score             += removedPairsCount * min(x, y);

        return score;
    }

private:
    string removeSubstring(string& s, string& matchStr) {
        

        int i=0; // for writing purpose 
        for(int j=0;j<s.size();j++)
        {
            s[i++]=s[j];
            if(i>1 && s[i-2]==matchStr[0] && s[i-1]==matchStr[1])
            {
                i-=2;
            }
        }

        s.erase(begin(s)+i,end(s));
        return s;
    }
};
