/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


https://leetcode.com/problems/reorder-list/description/?envType=daily-question&envId=2024-03-19
class Solution {
public:



     ListNode* reverse(ListNode*head)
    {
        ListNode*temp=head;

        ListNode*prev=NULL;

        while(temp)
        {
            ListNode*next=temp->next;
            temp->next=prev;
            prev=temp;
            temp=next;
        }       

        return prev;
    }

    void reorderList(ListNode* head) {

        if(!head || !head->next)
        {
            return ;
        }
        ListNode*slow=head;
        ListNode*fast=head;
        ListNode*prev=NULL;  
        while(fast&& fast->next)
        {
            fast=fast->next->next;
            prev=slow;
            slow=slow->next;
        }

        // reversethe second half of the linkedlist and match the nodes
        prev->next=NULL;
        ListNode*head2=reverse(slow);
        ListNode*head1=head;
        while(head1 && head2)
        {
            ListNode*head1next=head1->next;
            ListNode*head2next=head2->next;
            head1->next=head2;
            if(head1next==NULL)
            {
                break;
            }
            head2->next=head1next;
            head2=head2next;
            head1=head1next;
        }


        
    }
};
