https://leetcode.com/problems/design-a-food-rating-system/?envType=daily-question&envId=2023-12-17
class FoodRatings {
public:
struct CustomPairCompare {
    bool operator()(const std::pair<int, std::string>& a, const std::pair<int, std::string>& b) const {
        // Compare first elements of pairs
        if (a.first != b.first) {
            return a.first > b.first; // Sort by the first element in ascending order
        } else {
            // If first elements are equal, compare second elements lexicographically
            return a.second < b.second; // Sort by the second element in lexicographical order
        }
    }
};

        unordered_map< string, set <pair<int,string> ,CustomPairCompare  >> umap;
        unordered_map<string,string>food_cuisine_map;
        unordered_map<string,int>food_rating;


    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        for(int i=0;i<foods.size();i++)
        {
            string food_name=foods[i];
            string cuisine=cuisines[i];
            int rating=ratings[i];
            umap[cuisine].insert(make_pair(rating,food_name));
            food_cuisine_map[food_name]=cuisine;
            food_rating[food_name]=rating;
        }   

    }
    
    void changeRating(string food, int newRating) {
        
        string cuisine=food_cuisine_map[food];
        int rating=food_rating[food];

        umap[cuisine].erase({rating,food});
        umap[cuisine].insert(make_pair(newRating,food));
        food_rating[food]=newRating;

    }
    
    string highestRated(string cuisine) {
        
        return umap[cuisine].begin()->second;
      


    }
};

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);
 * obj->changeRating(food,newRating);
 * string param_2 = obj->highestRated(cuisine);
 */
