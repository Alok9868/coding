https://leetcode.com/problems/maximal-rectangle/description/?envType=daily-question&envId=2024-04-13


class Solution {
public:

    int largestRectangleArea(vector<int>&heights)
    {
        stack<int>st;
        int n=heights.size();
        vector<int>prev(n,-1);
        vector<int>next(n,n);
        for(int i=0;i<n;i++)
        {
            while(!st.empty() && heights[st.top()]>=heights[i])
            {
                st.pop();
            }
            if(!st.empty())
            {
                prev[i]=st.top();
            }
            st.push(i);
        }
        while(!st.empty())
        {
            st.pop();
        }

        for(int j=n-1;j>=0;j--)
        {
            while(!st.empty() && heights[st.top()]>=heights[j])
            {
                st.pop();
            }
            if(!st.empty())
            {
                next[j]=st.top();
            }
            st.push(j);
        }


        int area=0;
        for(int i=0;i<n;i++)
        {
            area=max(area,(next[i]-prev[i]-1)*heights[i]);
        }
        return area;

    }


    int maximalRectangle(vector<vector<char>>& matrix) {

        int row=matrix.size();
        int col=matrix[0].size();
        vector<int>heights(col,0);
        int ans=0;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(matrix[i][j]=='0')
                {
                    heights[j]=0;
                }
                else
                {
                    heights[j]+=1;
                }
            }
           ans=max(ans,largestRectangleArea(heights));
        }

        return ans;
        
    }
};
