https://www.youtube.com/watch?v=0PFE_7S3X-U&t=725s&ab_channel=codestorywithMIK
//https://leetcode.com/problems/flatten-nested-list-iterator/?envType=daily-question&envId=2023-10-20
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    stack<NestedInteger>st;
    NestedIterator(vector<NestedInteger> &nestedList) {
        
        for(int i=nestedList.size()-1;i>=0;i--)
        {
            st.push(nestedList[i]);
        }
    }
    
    int next() {

        int num=st.top().getInteger();
        st.pop();
        return num;
        
    }
    
    bool hasNext() {
        if(st.empty())
        {
            return false;
        }
    
        bool ans=false;
        while(!st.empty())
        {
            NestedInteger obj=st.top();
            st.pop();
            if(!obj.isInteger() && obj.getList().size()==0)
            {
                continue;
            }
             if(obj.isInteger())
                {
                    st.push(obj);
                    return true;
                }
                    vector<NestedInteger>list=obj.getList();
                    for(int i=list.size()-1;i>=0;i--)
                    {
                        st.push(list[i]);
                    }
        }

        return ans;
        
    

        
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
