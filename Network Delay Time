
https://leetcode.com/problems/network-delay-time/

Solution using Dijkstra algo

class Solution {
public:
    class comp
        {
        
        public:
        bool operator()(pair<int,int>&a,pair<int,int>&b)
        {
            return a.second>b.second;
        }
            
        };


    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        vector<vector<int>>adj[n+1];
        
        for(int i=0;i<times.size();i++)
        {
            int u=times[i][0];
            int v=times[i][1];
            int time=times[i][2];
            adj[u].push_back({v,time});
        }

      
         priority_queue< pair<int,int>  , vector< pair<int,int> >,comp>pq;
        
        
        vector<int>time(n+1,INT_MAX);
        int S=k;
        time[S]=0;
        pq.push({S,0});
        while(!pq.empty())
        {
            int node=pq.top().first;
            int time1=pq.top().second;
            pq.pop();
            for(auto it:adj[node])
            {
                int v=it[0];
                int time2=it[1];
                if(time2+time1 < time[v])
                {
                    time[v]=time2+time1;
                    pq.push({v,time[v]});
                }
            }
        }

        int max_time=0;
        for(int i=1;i<=n;i++)
        {
            if(time[i]==INT_MAX)
            {
                return -1;
            }
            max_time=max(max_time,time[i]);
        }

        
        return max_time;
        








    }
};
