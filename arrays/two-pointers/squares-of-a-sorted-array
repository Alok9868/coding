https://leetcode.com/problems/squares-of-a-sorted-array/description/?envType=daily-question&envId=2024-03-02

class Solution {
public:

    int allPositive(vector<int>& nums)
    {
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]<0)
            {
                return i;
            }
        }
        return -1;
    }

     int allNegative(vector<int>& nums)
    {
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>=0)
            {
                return i;
            }
        }
        return -1;
    }

    void findSquare(vector<int>& nums)
    {
        for(int i=0;i<nums.size();i++)
        {
            nums[i]=(nums[i]*nums[i]);
        }
    }
    vector<int> sortedSquares(vector<int>& nums) {

        
        int n=nums.size();
        if(allPositive(nums)==-1)
        {
            findSquare(nums);   
            return nums;
        }
        int pivot_idx=allNegative(nums);
        if(pivot_idx==-1)
        {
            findSquare(nums);   
            reverse(nums.begin(),nums.end());
            return nums;
        }



            vector<int>ans(n,0);
            int k=0;
            int i=pivot_idx-1;
            int j=pivot_idx;
            while(i>=0 && j<n)
            {
                int i_square=(nums[i]*nums[i]);
                int j_square=(nums[j]*nums[j]);
                if(i_square< j_square)
                {
                    ans[k++]=i_square;
                    i--;
                }
                else
                {
                    ans[k++]=j_square;
                    j++;
                }
            }

            while(i>=0)
            {
                int i_square=(nums[i]*nums[i]);
                ans[k++]=i_square;
                i--;

            }
            while(j<n)
            {
                int j_square=(nums[j]*nums[j]);
                ans[k++]=j_square;
                j++;
            }

        return ans;
        
    }
};
