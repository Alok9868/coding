https://leetcode.com/problems/maximum-good-subarray-sum/description/


//o(n) , o(1)
class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        
        int n=nums.size();
        long long ans;
        bool flag=true;

        unordered_map<int,int>valIndex;
        unordered_map<int,long long>prefixSum;

        //1 3 6 10 15 21
        //k=1
        //val-index hashmap
        //1 -0
        //2-1
        //3-2
        //4-3
        //5-4
        //6-5


        //prefix hashmap
        //0 - 1
        //1-3
        //2-6
        //3-10
        //4-15
        //5-21

        //6 -1 - 5
        // 5




        for(int i=0;i<n;i++)
        {
            long long sum=nums[i];
            for(int j=i+1;j<n;j++)
            {
                sum+=nums[j];
                if(abs(nums[j]-nums[i])==k)
                {
                    if(flag)
                    {
                        ans=sum;
                    }
                    flag=false;
                    ans=max(ans,sum);
                }
            }
        }

        if(flag)
        {
            return 0;
        }
        return ans;


    }
};


//optimized approach   - o(n) , o(n)


class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        
        int n=nums.size();
        vector<long long >prefixSum(n+1,0);
        prefixSum[0]=nums[0];
        for(int i=1;i<n;i++)
        {
            prefixSum[i]=prefixSum[i-1]+nums[i];
        }

        unordered_map<int,long long>umap;
        long long ans=-1e15;
        long long sum=0;
        umap[nums[0]]=0;


        for(int i=1;i<n;i++)
        {
            sum+=nums[i];
            int exp1=nums[i]-k;
            int exp2=nums[i]+k;
            if(umap.find(exp1)!=umap.end())
            {
                long long curr_ans=prefixSum[i]-umap[exp1];
                ans=max(ans,curr_ans);
            }
            if(umap.find(exp2)!=umap.end())
            {
                long long curr_ans=prefixSum[i]-umap[exp2];
                ans=max(ans,curr_ans);
            }

            if(umap.find(nums[i])!=umap.end())
            {
                umap[nums[i]]=min(umap[nums[i]],prefixSum[i-1]);
            }
            else
            {
                umap[nums[i]]=prefixSum[i-1];
            }
        }

        if(ans==-1e15)
        {
            return 0;
        }
        return ans;




    }
};


